Number,Competency,Python Content,C++ Content,,#,Bloom's,Description
1,Programming Fundamentals,,,,6,Create,Use informaiton to create something new
1.1,Working with number systems:,,,,5,Evaluate,Examine information and make judgments
1.1.1,"Converting between binary, decimal, and hexadecimal.",Number systems,,,4,Analyze,Take apart the known and identify relationships
1.1.2,Applying number systems in programming contexts.,Number systems,,,3,Apply,Use informaiton in a new (but similar) situation
1.2,Understanding data types and variables:,,,,2,Understand,Grasp meaning of instructional materials
1.2.1,Understanding primitive or basic data types,Concepts of variables,,,1,Remember,Recall specific facts
1.2.2,Understanding non-primitive or complex data types,"Data type - Strings, Tuples",Classes,,,,
1.2.3,Understanding constants and their usage.,,Const keyword,,,,
1.2.4,Understanding variables and their usage.,Variables,Pointers; References,,,,
1.2.5,"Identifying the scope of variables (local, method/function, class, global).",Variables,Pointers; References,,,,
1.3,Handling operators and expressions:,,,,,,
1.3.1,Applying assignment operators.,Concepts of variables,Classes; Operator Overloading,,,,
1.3.2,Using arithmetic operators in expressions.,Arithmetic operators,,,,,
1.3.3,Applying relational operators.,Simple conditionals,,,,,
1.3.4,Constructing logical expressions.,Nested conditionals,,,,,
1.3.5,Evaluating Boolean expressions.,Simple conditionals,,,,,
1.3.6,Using logical operators in complex conditions.,Nested conditionals,,,,,
1.4,Managing input and output:,,,,,,
1.4.1,Implementing user input and program output.,Concepts of variables,File I/O; Binary File I/O; Command line,,,,
1.4.2,Validating input data for correctness.,,,,,,
1.4.3,Implementing strategies for validating user input.,,,,,,
1.4.4,Comparing input validation techniques.,,,,,,
1.4.5,Handling exceptions.,,,,,,
2,Data Management and Processing ,,,,,,
2.1,Data structures:,,,,,,
2.1.1,"Declaring, initializing, and manipulating 1D arrays.",Data Type - Lists,Dynamic memory,,,,
2.1.2,Working with 2D arrays for tabular data.,,Dynamic memory,,,,
2.1.3,"Using lists (e.g., ArrayList, vector)",Data Type - Lists,Dynamic memory; Linked Lists,,,,
2.1.4,Using stacks / deque,,,,,,
2.1.5,Using queues,,,,,,
2.1.6,Using sets,Data Type - Sets,,,,,
2.1.7,"Using key-value pairs (e.g., dictionary, map)",Dictionaries,Maps,,,,
2.2,File Input and Output (File I/O),,,,,,
2.2.1,Handling file path.,File I/O,File I/O,,,,
2.2.2,"Opening and closing files in various modes (read, write, append).",File I/O,File I/O,,,,
2.2.3,Reading data from a file.,File I/O,File I/O,,,,
2.2.4,Writing data to a file.,File I/O,File I/O,,,,
2.2.5,Handling different file formats.,File I/O,"File I/O, Binary File I/O",,,,
2.2.6,Handling erros in file operations.,File I/O,File I/O,,,,
2.2.7,Applying best practices for file I/O.,File I/O,,,,,
2.2.8,"Handling advanced file operations (pointers, buffer, temporary files).",File I/O,"Pointers, Binary File I/O",,,,
3,Object-Oriented Programming (OOP),,,,,,
3.1,Classes and objects:,,,,,,
3.1.1,"Understanding classes, objects, and constructors.",Class and inheritance,"Classes, Constructors",,,,
3.1.2,"Identifying components of a class (attributes, methods).",Class and inheritance,Classes,,,,
3.1.3,Creating constructors.,OOP: Class and Inheritance,Constructors,,,,
3.1.4,Creating and instantiating objects.,Class and inheritance,Classes; Constructors; The Big Three,,,,
3.2,Principles of OOP:,,,,,,
3.3.1,"Applying encapsulation and access specifiers (public, private).",,,,,,
3.3.2,Implementing inheritance and understanding class hierarchies.,Class and inheritance,Inheritance,,,,
3.3.3,Demonstrating polymorphism through method overriding.,OOP: Class and Inheritance,"Operator overloading, polymorphism",,,,
3.3,Best practices in OOP:,,,,,,
3.3.1,Determining the scope of variables and methods.,OOP: Class and Inheritance,Const keyword,,,,
3.3.2,Deciding when to create separate classes for modularization.,OOP: Class and Inheritance,The Big Three; Templates,,,,
3.3.3,Understanding differences between abstract and concrete classes.,,,,,,
4,Algorithm Fundamentals,,,,,,
4.1,Understanding algorithms:,,,,,,
4.1.1,Tracing algorithms for output prediction.,,Debugging,,,,
4.1.2,Debugging algorithms for correctness.,,Debugging,,,,
4.1.3,"Implementing reusable algorithms using generics (Java, C#), templates (C++), or type-agnostic approaches (Python, JavaScript).",,Templates,,,,
4.2,Applying search and sort algorithms:,,,,,,
4.2.1,Implementing linear and binary search.,,,,,,
4.2.2,"Using sorting algorithms like insertion, quick, and merge sort.",,,,,,
4.3,Recursive algorithms:,,,,,,
4.4.1,"Identifying components of recursion (base case, recursive call).",Recursion,,,,,
4.4.2,Converting recursive algorithms into iterative equivalents.,Recursion,,,,,
4.4,Evaluating algorithm efficiency:,,,,,,
4.4.1,Understanding complexity (Big O Notation).,,,,,,
4.4.2,Comparing algorithms based on efficiency.,,,,,,
5,Code Construction,,,,,,
5.1,Writing and modifying code:,,,,,,
5.1.1,Arranging statements in the correct sequence.,,,,,,
5.1.2,Identifying equivalent code segments.,,,,,,
5.2,Utilizing control structures:,,,,,,
5.2.1,Writing programs with sequence.,Simple conditionals,,,,,
5.2.2,Whiting programs with simple conditionals,Simple conditionals,,,,,
5.2.3,"Implementing nested and compound conditionals (if, else, switch).",Nested conditionals,,,,,
5.2.4,Creating for loops for repetitive tasks.,For loops,,,,,
5.2.5,"Creating while (while, do-while) loops for repetitive tasks.",While loops,,,,,
5.3,Working with procedures and methods:,,,,,,
5.3.1,Writing void and return methods without parameters.,Functions,,,,,
5.3.2,Writing void and return methods with parameters.,Functions,,,,,
6,Program Development Practices,,,,,,
6.1,Debugging and testing:,,,,,,
6.1.1,Identifying syntax errors.,,Debugging,,,,
6.1.2,Identifying runtime errors.,,Debugging,,,,
6.1.3,Identifying logic errors.,Destructors,Debugging,,,,
6.1.4,Writing test cases to validate program correctness.,,Debugging,,,,
6.1.5,"Applying debugging techniques (e.g., using print statements).",,Debugging,,,,
6.2,Documentation and code quality:,,,,,,
6.2.1,Writing internal documentation for code clarity.,Software Engineering,Clean code,,,,
6.2.2,Adhering to best practices for readable and maintainable code.,Software Engineering,Clean code,,,,
6.2.3,"Recognizing differences in code extensibility, modifiability, and reusability.",,Clean code; Templates,,,,
6.3,Libraries and APIs:,,,,,,
6.3.1,Using libraries for additional functionality.,"Math library, plotting",Libraries,,,,
6.3.2,Using APIs for additional functionality.,,Libraries,,,,
6.3.3,Identifying when to use libraries versus custom code.,,Libraries,,,,
6.3.4,"Applying generics or templates to write type-safe, reusable code for data structures and methods.",,Templates,,,,
6.3.5,Evaluating when to use generics/templates versus specific type implementations for performance and readability.,,Templates,,,,
6.4,Development tools:,,,,,,
6.4.1,Utilizing IDEs effectively for coding and debugging.,,,,,,
6.4.2,Recognizing benefits and drawbacks of development tools.,,Makefiles,,,,
7,Programming Language Concepts,,,,,,
7.1,Programming paradigms:,,,,,,
7.1.1,Differentiating between procedural and object-oriented programming.,OOP: Class and Inheritance,Classes,,,,
7.1.2,Recognizing terminology for each paradigm.,,,,,,
7.2,Compilation and interpretation:,,,,,,
7.2.1,Understanding the compilation process and output.,,Command line; Makefiles,,,,
7.2.2,Comparing source code and object code.,,Makefiles,,,,
7.3,Event-driven programming:,,,,,,
7.3.1,Understanding event-response mechanisms.,Event-Driven Program,,,,,
7.3.2,Identifying concurrency issues in event-driven programs.,,,,,,
8,Language Unique Programming Concepts,,,,,,
8.1,C++ Specific:,,,,,,
8.1.1,Using callable objects and overloading the () operator.,,Operator Overloading; Functors,,,,
8.1.2,Using function pointers.,,Function pointers,,,,
8.1.3,Using references for function parameters and return types.,,References,,,,
8.1.4,Comparing references to pointers and their appropriate use cases.,,Pointers; References,,,,
8.1.5,Using destructors for resource management.,,Destructors; The Big Three,,,,